#---
#benchmark-bbs:
#  active_key_label: "(( inline ))"  # the active key for encryption
#  aws_access_key_id: ''  # the aws access key for uploading metrics to s3
#  aws_bucket_name: ''  # the S3 bucket to upload metrics to
#  aws_region: ''  # the aws region where the S3 bucket lives
#  aws_secret_access_key: ''  # the aws secret key for uploading metrics to s3
#  bbs:
#    api_location: bbs.service.cf.internal:8889  # the address of the BBS
#    client_cert: "(( inline ))"  # PEM-encoded client certificate
#    client_key: "(( inline ))"  # PEM-encoded client key
#    etcd:
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of etcd client idle http connections
#    require_ssl: true  # enable ssl for all communication with the bbs (false unsupported)
#  client_timeout: "(( inline ))"  # the http timeout for bbs client requests
#  datadog_api_key: ''  # the api key for emmitting datadog metrics
#  datadog_app_key: ''  # the application key for datadog metrics
#  datadog_metric_prefix: ''  # the datadog metric prefix
#  desired_lrps: "(( inline ))"  # the number of single instance desired lrps to generate and fetch
#  encryption_keys: []  # the key(s) to use for encryption at rest
#  etcd:
#    ca_cert: "(( inline ))"  # PEM-encoded root CA certificate
#    client_cert: "(( inline ))"  # PEM-encoded client certificate
#    client_key: "(( inline ))"  # PEM-encoded client key
#    client_session_cache_size: "(( inline ))"  # capacity of the etcd client tls client cache
#    machines: "(( inline ))"  # Addresses pointing to the ETCD cluster
#    require_ssl: true  # boolean to configure ssl connections with the etcd cluster
#  log_file: "(( inline ))"  # file name for benchmark log output in the BOSH log dir
#  log_level: "(( inline ))"  # debug, info, error or fatal'
#  num_populate_workers: "(( inline ))"  # the number of workers generating desired LRPs during setup
#  num_reps: "(( inline ))"  # the number of rep processes to simulate in test
#  num_trials: "(( inline ))"  # the number of trials of each benchmark to average across
#  percent_writes: 5  # percentage of actual LRPs to write on each rep bulk loop
#  sql:
#    db_connection_string: "(( inline ))"  # Connection string to use for SQL backend [username:password@tcp(1.1.1.1:1234)/database]
#    db_driver: "(( inline ))"  # driver to use, e.g. postgres or mysql
#diego:
#  auctioneer:
#    bbs:
#      api_location: bbs.service.cf.internal:8889  # Address to the BBS Server
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      client_session_cache_size: "(( inline ))"  # capacity of the tls client cache
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of idle http connections
#      require_ssl: true  # enable ssl for all communication with the bbs
#    cell_state_timeout: 1s  # Timeout applied to HTTP requests to the Cell State endpoint.
#    debug_addr: 127.0.0.1:17001  # address at which to serve debug info
#    dropsonde_port: 3457  # local metron agent's port
#    listen_addr: 0.0.0.0:9016  # address where auctioneer listens for LRP and task start auction requests
#    log_level: info  # Log level
#    starting_container_weight: 0.25  # Factor to bias against cells with starting containers (0.0 - 1.0)
#  bbs:
#    active_key_label: "(( inline ))"  # Label of the encryption key to be used when writing to the database
#    advertisement_base_hostname: bbs.service.cf.internal  # Suffix for the BBS advertised hostname
#    auctioneer:
#      api_url: http://auctioneer.service.cf.internal:9016  # Address of the auctioneer API
#    ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#    convergence:
#      expire_completed_task_duration_in_seconds: 120  # completed, unresolved tasks are deleted after this duration in seconds
#      expire_pending_task_duration_in_seconds: 1800  # unclaimed tasks are marked as failed, after this duration in seconds
#      kick_task_duration_in_seconds: 30  # the interval, in seconds, between kicks to tasks in seconds
#      repeat_interval_in_seconds: 30  # the interval between runs of the converge process
#    debug_addr: 127.0.0.1:17017  # address at which to serve debug info
#    desired_lrp_creation_timeout: "(( inline ))"  # expected maximum time to create all components of a desired LRP
#    dropsonde_port: 3457  # local metron agent's port
#    enable_access_log: false  # Enable access log, i.e. log every request made to the bbs
#    encryption_keys: []  # List of encryption keys to be used
#    etcd:
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      client_session_cache_size: "(( inline ))"  # capacity of the tls client cache
#      machines:
#      - etcd.service.cf.internal
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of idle http connections
#      require_ssl: true  # enable ssl for all communication with etcd
#    health_addr: 127.0.0.1:8890  # address at which to serve API requests
#    listen_addr: 0.0.0.0:8889  # address at which to serve API requests
#    log_level: info  # Log level
#    require_ssl: true  # require ssl for all communication the bbs
#    server_cert: "(( inline ))"  # PEM-encoded client certificate
#    server_key: "(( inline ))"  # PEM-encoded client key
#    sql:
#      ca_cert: "(( inline ))"  # Bundle of CA certificates for the BBS to verify the SQL server SSL certificate when connecting via SSL
#      db_connection_string: "(( inline ))"  # Connection string to use for SQL backend (for example, username:password@tcp(1.1.1.1:1234)/database)
#      db_driver: mysql  # mysql,postgres)'
#      max_open_connections: "(( inline ))"  # Maximum number of open connections to the SQL database
#      require_ssl: false  # Whether to require SSL for BBS communication to the SQL backend
#  canary:
#    api: "(( inline ))"  # The Elastic Runtime API endpoint URL
#    app_domain: "(( inline ))"  # The domain to use for the canary app
#    app_name: "(( inline ))"  # App name for the canary app
#    cf_stack: cflinuxfs2  # Stack for the canary app
#    datadog_api_key: "(( inline ))"  # Datadog API key for the canary app
#    deployment_name: "(( inline ))"  # Deployment name for the canary app
#    instance_count: "(( inline ))"  # Number of instances of the canary app
#    org: "(( inline ))"  # The Elastic Runtime organization name to use for the canary app
#    password: "(( inline ))"  # The Elastic Runtime API user's password
#    space: "(( inline ))"  # The Elastic Runtime space name to use for the canary app
#    user: "(( inline ))"  # The Elastic Runtime API user
#  cfdot:
#    bbs:
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      use_ssl: true  # true if the bbs requires TLS connections, false otherwise
#  executor:
#    ca_certs_for_downloads: "(( inline ))"  # Concatenation of trusted CA certificates to be used when downloading assets.
#    cache_path: "/var/vcap/data/executor_cache"  # path to the executor's cache
#    container_inode_limit: 200000  # the inode limit enforced on each garden container.
#    container_max_cpu_shares: 1024  # the maximum number of cpu shares for a container.
#    container_metrics_report_interval: "(( inline ))"  # the frequency for emitting container metrics
#    create_work_pool_size: 32  # Maximum number of concurrent create container operations.
#    delete_work_pool_size: 32  # Maximum number of concurrent delete container operations.
#    disk_capacity_mb: auto  # the container disk capacity the executor should manage.  this should not be greater than the actual disk quota on the VM
#    export_network_env_vars: true  # Export network environment variables into container (e.g. CF_INSTANCE_IP, CF_INSTANCE_PORT).
#    garden:
#      address: "/var/vcap/data/garden/garden.sock"  # Garden server listening address.
#      network: unix  # Network type for the garden server connection (tcp or unix).
#    garden_healthcheck:
#      command_retry_pause: 5s  # Time to wait between retrying garden commands
#      interval: 10m  # Frequency for healtchecking garden
#      process:
#        args: "-c, ls > /tmp/test"  # List of command line args to pass to the garden health check process
#        dir: "(( inline ))"  # Directory to run the healthcheck process from
#        env: "(( inline ))"  # Environment variables to use when running the garden health check
#        path: "/bin/sh"  # Path of the command to run to perform a container healthcheck
#        user: vcap  # User to use while performing a container healthcheck
#      timeout: 10m  # Maximum allowed time for garden healthcheck
#    healthcheck_work_pool_size: 64  # Maximum number of concurrent health check operations.
#    healthy_monitoring_interval_in_seconds: 30  # Interval to check healthy containers in seconds.
#    max_cache_size_in_bytes: 10000000000  # maximum size of the cache in bytes - this should leave a healthy overhead for temporary items, etc.
#    max_concurrent_downloads: 5  # the max concurrent download steps that can be active
#    memory_capacity_mb: auto  # the memory capacity the executor should manage.  this should not be greater than the actual memory on the VM
#    metrics_work_pool_size: 8  # Maximum number of concurrent get container metrics operations.
#    post_setup_hook: "(( inline ))"  # arbitrary command to run after setup action'
#    post_setup_user: "(( inline ))"  # user to run post setup hook command'
#    read_work_pool_size: 64  # Maximum number of concurrent get container info operations.
#    unhealthy_monitoring_interval_in_seconds: 2  # Interval to check unhealthy containers in seconds.
#    volman:
#      driver_paths: "/var/vcap/data/voldrivers"  # or ; depending on the OS)'
#  file_server:
#    debug_addr: 127.0.0.1:17005  # address at which to serve debug info
#    dropsonde_port: 3457  # local metron agent's port
#    listen_addr: 0.0.0.0:8080  # Address of interface on which to serve files
#    log_level: info  # Log level
#    static_directory: "/var/vcap/jobs/file_server/packages/"  # Fully-qualified path to the doc root for the file server's static files
#  rep:
#    bbs:
#      api_location: bbs.service.cf.internal:8889  # Address to the BBS Server
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      client_session_cache_size: "(( inline ))"  # capacity of the tls client cache
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of idle http connections
#      require_ssl: true  # enable ssl for all communication with the bbs
#    consul_agent_port: 8500  # local consul agent's port
#    debug_addr: 127.0.0.1:17008  # address at which to serve debug info
#    dropsonde_port: 3457  # local metron agent's port
#    evacuation_polling_interval_in_seconds: 10  # The interval to look for completed tasks and LRPs during evacuation in seconds
#    evacuation_timeout_in_seconds: 600  # The time to wait for evacuation to complete in seconds
#    listen_addr: 0.0.0.0:1800  # address to serve auction and LRP stop requests on
#    log_level: info  # Log level
#    optional_placement_tags: []  # Array of optional tags used for scheduling Tasks and LRPs
#    placement_tags: []  # Array of tags used for scheduling Tasks and LRPs
#    polling_interval_in_seconds: 30  # The interval to look for completed tasks and LRPs in seconds
#    preloaded_rootfses:
#    - windows2012R2:/tmp/windows2012R2
#    rootfs_providers:
#    - docker
#    stack: windows2012R2  # The stack for which to handle requests
#    trusted_certs: "(( inline ))"  # Concatenation of trusted CA certificates to be made available on the cell.
#    use_azure_fault_domains: false  # Use Azure Fault-Domains to determine the value of the zone. The value of the zone will be z<FD-index>. e.g. z0, z1, etc.
#    zone: "(( inline ))"  # The zone associated with the rep
#  route_emitter:
#    bbs:
#      api_location: bbs.service.cf.internal:8889  # Address to the BBS Server
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      client_session_cache_size: "(( inline ))"  # capacity of the tls client cache
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of idle http connections
#      require_ssl: true  # enable ssl for all communication with the bbs
#    debug_addr: 127.0.0.1:17009  # address at which to serve debug info
#    dropsonde_port: 3457  # local metron agent's port
#    log_level: info  # Log level
#    nats:
#      machines: "(( inline ))"  # IP of each NATS cluster member.
#      password: "(( inline ))"  # Password for server authentication.
#      port: 4222  # The port for the NATS server to listen on.
#      user: "(( inline ))"  # Username for server authentication.
#    sync_interval_in_seconds: 60  # Interval to sync routes to the router in seconds.
#  ssh_proxy:
#    allowed_ciphers: "(( inline ))"  # Comma separated list of allowed cipher algorithms
#    allowed_keyexchanges: "(( inline ))"  # Comma separated list of allowed key exchange algorithms
#    allowed_macs: "(( inline ))"  # Comma separated list of allowed MAC algorithms
#    bbs:
#      api_location: bbs.service.cf.internal:8889  # Address to the BBS Server
#      ca_cert: "(( inline ))"  # PEM-encoded CA certificate
#      client_cert: "(( inline ))"  # PEM-encoded client certificate
#      client_key: "(( inline ))"  # PEM-encoded client key
#      client_session_cache_size: "(( inline ))"  # capacity of the tls client cache
#      max_idle_conns_per_host: "(( inline ))"  # maximum number of idle http connections
#      require_ssl: true  # enable ssl for all communication with the bbs
#    cc:
#      external_port: 9022  # External port of the Cloud Controller API
#      internal_service_hostname: cloud-controller-ng.service.cf.internal  # Internal service hostname of Cloud Controller Api
#    debug_addr: 127.0.0.1:17016  # address at which to serve debug info
#    diego_credentials: "(( inline ))"  # Diego Credentials to be used with the Diego authenitcation method
#    dropsonde_port: 3457  # local metron agent's port
#    enable_cf_auth: false  # Allow ssh access for cf applications
#    enable_diego_auth: false  # Allow ssh access for diego applications
#    host_key: "(( inline ))"  # PEM encoded RSA private key used to identify host
#    listen_addr: 0.0.0.0:2222  # address for the proxy to listen on
#    log_level: info  # Log level
#    uaa_secret: "(( inline ))"  # The oauth client secret used to authenticate the ssh-proxy with the uaa
#    uaa_token_url: "(( inline ))"  # URL of the UAA token endpoint
#  ssl:
#    skip_cert_verify: false  # when connecting over https, ignore bad ssl certificates
#vizzini:
#  bbs:
#    api_location: bbs.service.cf.internal:8889  # The address of the BBS
#    client_cert: "(( inline ))"  # PEM-encoded client certificate
#    client_key: "(( inline ))"  # PEM-encoded client key
#    require_ssl: true  # enable ssl for all communication with the bbs
#  eventually_timeout: "(( inline ))"  # default timeout for ginkgo assertions
#  nodes: 4  # The number of nodes to run the tests with
#  routable_domain_suffix: "(( inline ))"  # The deployment's routable domain name
#  ssh:
#    proxy_address: ssh-proxy.service.cf.internal:2222  # Host and port for the SSH proxy
#    proxy_secret: "(( inline ))"  # Shared secret for the SSH proxy's Diego authenticator
#  verbose: false  # Run tests in verbose mode
